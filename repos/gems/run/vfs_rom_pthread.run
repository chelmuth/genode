
create_boot_directory


set is_autopilot [get_cmd_switch --autopilot]


if {$is_autopilot} {
	import_from_depot [depot_user]/src/[base_src]
	import_from_depot [depot_user]/src/init
	import_from_depot [depot_user]/src/libc
	import_from_depot [depot_user]/src/vfs
}



install_config {
<config verbose="no">
	<parent-provides>
		<service name="ROM"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="Timer"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="256"/>

	<start name="timer" caps="100">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Timer"/>
		</provides>
	</start>

	<start name="test-vfs_rom_pthread">
		<resource name="RAM" quantum="64M"/>
		<config iterations="100000">
			<vfs>
				<dir name="ro">
					<rom name="test-data.bin"/>
				</dir>
				<dir name="dev">
					<log/>
				</dir>
			</vfs>
			<libc stdout="/dev/log"/>
		</config>
	</start>

</config>
}


set build_components {
	test/vfs_rom_pthread
}

append_if [expr !$is_autopilot] build_components {
	core
	init
	timer
	server/vfs
	server/fs_rom
}

build $build_components

set boot_components {
	test-vfs_rom_pthread
}

append_if [expr !$is_autopilot] boot_components {
	core
	ld.lib.so
	init
	timer
	libc.lib.so
	vfs
	vfs.lib.so
	fs_rom
}

# define the test data
exec mkdir -p bin
catch { exec dd if=/dev/urandom of=bin/test-data.bin bs=1k count=64 }

append boot_components { test-data.bin }

build_boot_image $boot_components

append qemu_args " -nographic "


run_genode_until {.*--- test succeeded ---} 60000
